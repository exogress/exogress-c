name: Build and Publish Binaries

on:
  release:
    types:
      - created

jobs:
  check-version:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: 1

    steps:
      - name: Checkout sources
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - uses: Swatinem/rust-cache@v1

#      - name: Check version
#        working-directory: ./package-publisher
#        run: |
#          cargo build
#          ./target/debug/exogress-package-publisher --version ${{ github.event.release.tag_name }} check_version

  build-and-publish:
    needs: check-version
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            upload_asset_name: exogress-macos-x86_64
            rustflags: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            upload_asset_name: exogress-macos-aarch64
            rustflags: ''
          - os: windows-latest
            upload_asset_name: exogress-win32.exe
            target: i686-pc-windows-msvc
            rustflags: '-C target-feature =+crt-static'
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            upload_asset_name: exogress-win64.exe
            rustflags: '-C target-feature=+crt-static'
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            upload_asset_name: exogress-linux-aarch64-gnu
            rustflags: ''
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            upload_asset_name: exogress-linux-aarch64-musl-static
            rustflags: ''
          - os: ubuntu-latest
            target: arm-unknown-linux-gnueabi
            upload_asset_name: exogress-linux-arm-gnueabi
            rustflags: ''
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabi
            upload_asset_name: exogress-linux-arm-musleabi-static
            rustflags: ''
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            upload_asset_name: exogress-linux-armv7-gnueabihf
            rustflags: ''
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            upload_asset_name: exogress-linux-armv7-musleabihf-static
            rustflags: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            upload_asset_name: exogress-linux-x86_64-gnu
            rustflags: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            upload_asset_name: exogress-linux-x86_64-musl-static
            rustflags: ''

    env:
      RUST_BACKTRACE: 1

    steps:
      - name: Checkout sources
        uses: actions/checkout@v1
        with:
          submodules: true

      - uses: Swatinem/rust-cache@v1

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
        if: matrix.target != 'aarch64-apple-darwin'

      - name: macos aarch64-specific items
        run: |
          # Use nightly for now
          rustup toolchain install --profile=minimal nightly
          rustup default nightly

          # Use the beta compiler
          sudo xcode-select -s /Applications/Xcode_12.2.app/Contents/Developer/

          # Set SDK environment variables
          echo "SDKROOT=$(xcrun -sdk macosx11.0 --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.0 --show-sdk-platform-version)" >> $GITHUB_ENV
        if: matrix.target == 'aarch64-apple-darwin'

      - name: Build release binary
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
        with:
          use-cross: true
          command: build
          args: --release --target=${{ matrix.target }}

#      - name: Upload release binary (non-Windows)
#        uses: actions/upload-release-asset@v1.0.2
#        if: matrix.os != 'windows-latest'
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ github.event.release.upload_url }}
#          asset_path: ./target/${{ matrix.target }}/release/exogress
#          asset_name: ${{ matrix.upload_asset_name }}
#          asset_content_type: application/octet-stream
#
#      - name: Upload release binary (Windows)
#        uses: actions/upload-release-asset@v1.0.2
#        if: matrix.os == 'windows-latest'
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ github.event.release.upload_url }}
#          asset_path: ./target/${{ matrix.target }}/release/exogress.exe
#          asset_name: ${{ matrix.upload_asset_name }}
#          asset_content_type: application/octet-stream
